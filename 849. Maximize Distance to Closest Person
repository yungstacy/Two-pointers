class Solution {
         public int maxDistToClosest(int[] seats) {
        int l = 0;
        int r = 0;
        int result = 0;

        while (l < seats.length) {
            // before
            // 1 1 1 0 0 1 1
            // l
            // r

            // Run the right pointer as long as there are consecutive seats
            while (r + 1 < seats.length && seats[r] == seats[r + 1]) {
                r++;
            }

            // after
            // 1 1 1 0 0 1 1
            // l
            // r

            // Update answer only if there are 0's in the sliding window
            if (seats[r] == 0) {
                // If 0 pressed against the left or right edge, i.e. 1000 or 0001
                // 1000
                // l r

                // 0001
                // l r

                // Then number of free seats will be r - l + 1 and we sit to the very edge
                if (l == 0 || r == seats.length - 1) {
                    result = Math.max(result, r - l + 1);
                }
                // In this case the window is located between 1's, i.e. 10001
                // 10001
                // l r
                // so we find number of seats by the formula (r - l + 2) // 2
                else {
                    result = Math.max(result, (r - l + 2) / 2);
                }
            }

            // Intervals do not overlap, so we shift by r + 1, i.e. exactly where the next interval starts
            l = r + 1;
            r = r + 1;
        }

        return result;
    }
}
